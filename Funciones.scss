//Importa sass:list para el manejo de listas
@use "sass:list";

$variableGlobal: null;
//Tipos expeciales admitidos para los estados
$tipos-admitidos: ("hover", "focus", "active");

//Genera clases y les permite usar distintos estados
@mixin generar-estados ($nombre, $tipos:( "normal", "hover" )) {
    //Comprueba que $tipos sea una lista
    @if type-of($tipos) != 'list'{
        @error "El valor de $tipos ha de ser un list";
    }
    //Comprueba si $tipos contiene el valor "normal"
    @if list.index($tipos, "normal") != null {
        //Crea la clase con el nombre
        .#{$nombre}{
            //Contenido pasado en la llamada
            @content;
        }
    } 

    //Recorre la lista de los tipos
    @each $tipo in $tipos {
        //Comprueba si el tipo se encuentra en la lista de tipos admitidos
        @if list.index($tipos-admitidos, $tipo) != null {
            //Crea la clase apartir del el tipo y le asigna el tipo
            .#{$tipo}\:#{$nombre}:#{$tipo}{
                //Contenido pasado en la llamada
                @content;
            }
        }
    }
}

//Permite generar clases a partir de un map, recibe el nombre, los valores (map) y los tipos (list), para generar 
//otros tipos de clases (similar a generar-estados), por ejemplo el hover. Por motivos de rendimiento no usa la funcion generar-estados y la redefine
@mixin generar-clases ($nombre, $valores, $tipos:( "normal", "hover" ) ) {
    //Comprueba que $valores sea un map y $tipos sea una lista
    @if type-of($valores) != 'map' or type-of($tipos) != 'list'{
        @error "El valor de $valores ha de ser un map y $tipos un list";
    }

    //Comprueba si $tipos contiene el valor "normal"
    @if list.index($tipos, "normal") != null {
        //Recorre todos los valores del map
        @each $nom, $valor in $valores {
            //Almacena el valor del map en la variable global
            $variableGlobal: $valor !global;
            //Genera el nombre en base al nombre pasado por parametro y la llave de la propiedad
            .#{$nombre}-#{$nom} {
                //Contenido pasado en la llamada
                @content;
            }
        }
    }

    //Recorre la lista de los tipos
    @each $tipo in $tipos {
        //Comprueba si el tipo se encuentra en la lista de tipos admitidos
        @if list.index($tipos-admitidos, $tipo) != null {
            //Recorre todos los valores del map
            @each $nom, $valor in $valores {
                //Almacena el valor del map en la variable global
                $variableGlobal: $valor !global;
                //Genera el nombre en base al nombre pasado por parametro y la llave de la propiedad
                .#{$tipo}\:#{$nombre}-#{$nom}:#{$tipo} {
                    //Contenido pasado en la llamada
                    @content;
                }
            }
        }
    }
}

//Funcion para generar un degradado de forma automatica en base a los parametros
@function degradado ( $colores, $porcentajes:() ){
    // Comprueba que porcentajes sea una lista, en caso de no serlo lanza un error
    @if type-of($porcentajes) != "list" {
        @error "$porcentajes ha de ser una lista ";
    }
    
    //En caso de que colores sea un map, lo convierte a un list
    @if  type-of($colores) == "map" {
        //Varialbe que almacena el list resultante del map, se inizializa como un list vacio
        $tmp: ();
        //Recorre el map
        @each $nombre, $valor in $colores {
            //Asigna a tmp los valores del map
            $tmp: list.append($tmp, $valor);
        }
        //Asigna a colores el list generado
        $colores: $tmp;
    }

    //Almacena las longitudes de colores y porcentajes en variables;
    $longitud-colores: list.length($colores);
    $longitud-porcentajes: list.length($porcentajes);
    
    //Comprueba la longitud de porcentajes es distinto al de colores
    @if $longitud-porcentajes < $longitud-colores {
        // En caso de ser distinto, iguala las longitudes añadiendo espacios vacios
        @for $i from $longitud-porcentajes through $longitud-colores {
            $porcentajes: list.append($porcentajes, "");
        }
        
        //Reasigna la longitud de porcentajes
        $longitud-porcentajes: list.length($porcentajes);
    }
    
    //Variable donde se almacena el resultado
    $resultado: null;
    
    //Recorre todas las posicones de colores, a excepcion de la ultima, para generar el gradiente
    @for $i from 1 to $longitud-colores {
       $resultado: $resultado + list.nth($colores, $i) + " " + list.nth($porcentajes, $i) + ", ";
    }

    // Añade la ultima posicion del resultado
    $resultado: $resultado + list.nth($colores, $longitud-colores) + " " + list.nth($porcentajes, $longitud-porcentajes);

    //Devuelve el resultado
    @return $resultado;
}